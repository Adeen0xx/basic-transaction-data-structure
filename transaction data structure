use std::time::{SystemTime, UNIX_EPOCH};

// Entry point of the program
fn main() {
    println!("Starting simulation...");

    // Example usage of SystemTime to get the current timestamp
    let now = SystemTime::now().duration_since(UNIX_EPOCH).unwrap();
    println!("Current time: {:?}", now.as_secs());

    // Create a sample transaction
    let sample_transaction = Transaction {
        tx_id: String::from("tx123"),
        sender: String::from("Alice"),
        receiver: String::from("Bob"),
        amount: 1000,
        gas_limit: 21000,
        max_fee_per_gas: 100,
        nonce: 1,
        timestamp: now.as_secs(),
    };

    // Clone the transaction
    let cloned_transaction = sample_transaction.clone();

    println!("Original Transaction: {:?}", sample_transaction);
    println!("Cloned Transaction: {:?}", cloned_transaction);
}

// Transaction structure
#[derive(Debug, Clone)] // Automatically derive Debug and Clone traits
struct Transaction {
    tx_id: String,          // Unique transaction identifier
    sender: String,         // Address of the sender
    receiver: String,       // Address of the receiver
    amount: u64,            // Amount to be transferred
    gas_limit: u64,         // Max computational cost (optional)
    max_fee_per_gas: u64,   // Maximum fee sender is willing to pay per gas unit
    nonce: u64,             // Unique number to prevent replay attacks
    timestamp: u64,         // Transaction creation time (Unix timestamp)
}
